// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataChannelProto.proto

#ifndef PROTOBUF_DataChannelProto_2eproto__INCLUDED
#define PROTOBUF_DataChannelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DataChannelProto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_DataChannelProto_2eproto();
void protobuf_AssignDesc_DataChannelProto_2eproto();
void protobuf_ShutdownFile_DataChannelProto_2eproto();

class pbDataChannelPkg;

// ===================================================================

class pbDataChannelPkg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataChannelProto.pbDataChannelPkg) */ {
 public:
  pbDataChannelPkg();
  virtual ~pbDataChannelPkg();

  pbDataChannelPkg(const pbDataChannelPkg& from);

  inline pbDataChannelPkg& operator=(const pbDataChannelPkg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pbDataChannelPkg& default_instance();

  void Swap(pbDataChannelPkg* other);

  // implements Message ----------------------------------------------

  inline pbDataChannelPkg* New() const { return New(NULL); }

  pbDataChannelPkg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pbDataChannelPkg& from);
  void MergeFrom(const pbDataChannelPkg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pbDataChannelPkg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deviceName = 1;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // optional string guid = 2;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:DataChannelProto.pbDataChannelPkg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DataChannelProto_2eproto();
  friend void protobuf_AssignDesc_DataChannelProto_2eproto();
  friend void protobuf_ShutdownFile_DataChannelProto_2eproto();

  void InitAsDefaultInstance();
  static pbDataChannelPkg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// pbDataChannelPkg

// optional string deviceName = 1;
inline void pbDataChannelPkg::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbDataChannelPkg::devicename() const {
  // @@protoc_insertion_point(field_get:DataChannelProto.pbDataChannelPkg.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbDataChannelPkg::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataChannelProto.pbDataChannelPkg.deviceName)
}
inline void pbDataChannelPkg::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataChannelProto.pbDataChannelPkg.deviceName)
}
inline void pbDataChannelPkg::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataChannelProto.pbDataChannelPkg.deviceName)
}
inline ::std::string* pbDataChannelPkg::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:DataChannelProto.pbDataChannelPkg.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbDataChannelPkg::release_devicename() {
  // @@protoc_insertion_point(field_release:DataChannelProto.pbDataChannelPkg.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbDataChannelPkg::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:DataChannelProto.pbDataChannelPkg.deviceName)
}

// optional string guid = 2;
inline void pbDataChannelPkg::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbDataChannelPkg::guid() const {
  // @@protoc_insertion_point(field_get:DataChannelProto.pbDataChannelPkg.guid)
  return guid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbDataChannelPkg::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataChannelProto.pbDataChannelPkg.guid)
}
inline void pbDataChannelPkg::set_guid(const char* value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataChannelProto.pbDataChannelPkg.guid)
}
inline void pbDataChannelPkg::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataChannelProto.pbDataChannelPkg.guid)
}
inline ::std::string* pbDataChannelPkg::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:DataChannelProto.pbDataChannelPkg.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbDataChannelPkg::release_guid() {
  // @@protoc_insertion_point(field_release:DataChannelProto.pbDataChannelPkg.guid)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbDataChannelPkg::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:DataChannelProto.pbDataChannelPkg.guid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataChannelProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataChannelProto_2eproto__INCLUDED
